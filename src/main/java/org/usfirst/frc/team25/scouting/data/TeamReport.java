package org.usfirst.frc.team25.scouting.data;

import com.sun.xml.internal.bind.v2.runtime.unmarshaller.XsiNilLoader;
import org.usfirst.frc.team25.scouting.data.models.Autonomous;
import org.usfirst.frc.team25.scouting.data.models.PostMatch;
import org.usfirst.frc.team25.scouting.data.models.ScoutEntry;
import org.usfirst.frc.team25.scouting.data.models.TeleOp;

import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;

import static org.usfirst.frc.team25.scouting.data.Statistics.average;
import static org.usfirst.frc.team25.scouting.data.Statistics.percent;

/**
 * Object model containing individual reports of teams in events and methods to process data
 * Not used during the 2018 season
 *
 * @author sng
 */
public class TeamReport {

    private final transient ArrayList<ScoutEntry> entries;
    private final int teamNum;
    private int noShowCount;
    private String teamName, frequentRobotCommentStr, allComments;
    ArrayList<ScoutEntry> levelOneStartEntries = new ArrayList<>();
    ArrayList<ScoutEntry> levelTwoStartEntries = new ArrayList<>();


    public TeamReport(int teamNum) {
        this.teamNum = teamNum;
        entries = new ArrayList<>();
        teamName = "";
        frequentRobotCommentStr = "";
        noShowCount = 0;

    }

    /**
     * Generates an easily-readable report with relevant stats on an team's capability
     *
     * @return A formatted string with relevant aggregate team stats
     */
    public String getQuickStatus() {
        //TODO write this
        String statusString = "Team " + getTeamNum();

        if (!getTeamName().isEmpty()) {
            statusString += " - " + getTeamName();
        }

        statusString += "\n\nSandstorm:";


        ArrayList<Object> autoList = SortersFilters.filterDataObject(entries, Autonomous.class);


        String[] autoIntMetricNames = new String[]{"cargoShipHatches", "rocketHatches", "cargoShipCargo", "rocketCargo",
                "hatchesDropped", "cargoDropped"};

        for (String metric : autoIntMetricNames) {
            statusString += "\nAvg. " + StringProcessing.convertCamelToSentenceCase(metric) + ": " + Statistics.round
                    (average(autoList, metric), 3);
        }

        statusString += "\nPercent HAB line cross" + Statistics.round(percent(autoList, "crossHabLine"), 2);

        if (levelOneStartEntries.size() > 0) {
            statusString += "\nOverall level one HAB line cross: " + Statistics.round(percent(SortersFilters.filterDataObject(levelOneStartEntries,Autonomous.class),
                    "crossHabLine"), 2) + "%";
        } else {
            statusString += "\nOverall level one HAB line cross: 0%";
        }
        if (levelTwoStartEntries.size() > 0) {
            statusString += "\nOverall level two HAB line cross: " + Statistics.round(percent(SortersFilters.filterDataObject(levelTwoStartEntries,
                    Autonomous.class),"crossHabLine"), 2) + "%";
        } else {
            statusString += "\nOverall level two HAB line cross: 0%";
        }


        statusString += "\n\nTele-Op:";

        ArrayList<Object> teleList = SortersFilters.filterDataObject(entries, TeleOp.class);


        String[] teleMetricNames = new String[]{"cargoShipHatches", "rocketLevelOneHatches", "rocketLevelTwoHatches",
                "rocketLevelThreeHatches", "cargoShipCargo", "rocketLevelOneCargo", "rocketLevelTwoCargo",
                "rocketLevelThreeCargo", "hatchesDropped", "cargoDropped"};


        for (String metric : teleMetricNames) {
            statusString += "\nAvg. " + StringProcessing.convertCamelToSentenceCase(metric) + ": " + Statistics.round
                    (average(teleList, metric), 2);
        }


        statusString += "\n\nEndgame:\n";

        ArrayList<Object> postList = SortersFilters.filterDataObject(entries, PostMatch.class);

        statusString += "\n\nOverall:";
        statusString += "\nAvg. calculated total point contribution: ";

        statusString += "\n\nCommon quick comments:\n" + frequentRobotCommentStr;


        return statusString;
    }

    public String getTeamName() {
        return teamName;
    }

    /**
     * Method to fetch the nickname of a team from a file
     *
     * @param dataLocation location of the TeamNameList file generated by <code>exportTeamList</code>
     */
    public void autoGetTeamName(File dataLocation) {
        String data = FileManager.getFileString(dataLocation);
        String[] values = data.split(",\n");

        for (String value : values) {

            if (value.split(",")[0].equals(Integer.toString(teamNum))) {

                teamName = value.split(",")[1];
                return;
            }
        }
    }

    public void findFrequentComments() {

        HashMap<String, Integer> commentFrequencies = new HashMap<>();
        for (String key : entries.get(0).getPostMatch().getRobotQuickCommentSelections().keySet()) {
            commentFrequencies.put(key, 0);
            for (ScoutEntry entry : entries) {
                if (entry.getPostMatch().getRobotQuickCommentSelections().get(key)) {
                    commentFrequencies.put(key, 1 + commentFrequencies.get(key));
                }
            }
        }

        ArrayList<String> frequentRobotComment = new ArrayList<>();

        for (String key : commentFrequencies.keySet()) {

            // Feel free to change this ratio
            if (commentFrequencies.get(key) >= entries.size() / 4.0) {
                frequentRobotComment.add(key);
            }
        }

        for (String comment : frequentRobotComment) {
            System.out.println(comment);
            frequentRobotCommentStr += StringProcessing.removeCommasBreaks(comment) + " \n";
        }

        allComments = "";
        for (ScoutEntry entry : entries) {
            if (!entry.getPostMatch().getRobotComment().equals("")) {
                allComments += entry.getPostMatch().getRobotComment() + "; ";
            }

        }


    }

    public void addEntry(ScoutEntry entry) {
        entry.getPostMatch().setRobotComment(StringProcessing.removeCommasBreaks(entry.getPostMatch().getRobotComment
                ()));

        entries.add(entry);
    }

    public ArrayList<ScoutEntry> getEntries() {
        return this.entries;
    }


    public int getTeamNum() {
        return teamNum;
    }

    public void calculateStats() {
        int sum = 0, total = 0;

        for (int i = 0; i < entries.size(); i++) {
            if (entries.get(i).getPreMatch().getStartingLevel() == 1) {
                levelOneStartEntries.add(entries.get(i));
            } else {
                levelTwoStartEntries.add(entries.get(i));
            }
        }
    }

    public void filterNoShow() {
        for (int i = 0; i < entries.size(); i++) {
            if (entries.get(i).getPreMatch().isRobotNoShow()) {
                entries.remove(i);
                i--;
                noShowCount++;
            }
        }
    }
}
