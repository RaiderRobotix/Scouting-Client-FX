package org.usfirst.frc.team25.scouting.data;

import org.usfirst.frc.team25.scouting.data.models.ScoutEntry;

import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;

/**
 * Object model containing individual reports of teams in events and methods to process data
 * Not used during the 2018 season
 *
 * @author sng
 */
public class TeamReport {

    final String autoGearPegLoc = "";
    final transient String frequentPilotCommentStr = "";
    final ArrayList<Integer> teleOpCubes = new ArrayList<>();
    private final transient ArrayList<ScoutEntry> entries;
    private final int teamNum; //transient because it's the key of the HashMap in EventReport
    private final ArrayList<Integer> totalSwitchCubes = new ArrayList<>();
    private final ArrayList<Integer> totalScaleCubes = new ArrayList<>();
    private final ArrayList<Integer> totalCubes = new ArrayList<>();
    private final ArrayList<Integer> totalDroppedCubes = new ArrayList<>();
    private final ArrayList<Double> firstCubeTimes = new ArrayList<>();
    private String teamName;
    private transient String frequentRobotCommentStr = "";

    public TeamReport(int teamNum) {
        this.teamNum = teamNum;
        entries = new ArrayList<>();
    }

    public String getTeamName() {
        return teamName;
    }

    /**
     * Method to fetch the nickname of a team from a file
     *
     * @param dataLocation location of the TeamNameList file generated by <code>exportTeamList</code>
     */
    public void autoGetTeamName(File dataLocation) {
        String data = FileManager.getFileString(dataLocation);
        String[] values = data.split(",\n");

        for (String value : values) {
            if (value.split(",")[0].equals(Integer.toString(teamNum))) {

                teamName = value.split(",")[1];
                return; //Terminates the method
            }
        }
    }

    public void calculateStats() {

        calculateTotals();

        //Calculate percentages, averages, standard deviations here

        HashMap<String, Integer> commentFrequencies = new HashMap<>();


        for (String key : entries.get(0).getPostMatch().getRobotQuickCommentSelections().keySet()) {
            commentFrequencies.put(key, 0);
            for (ScoutEntry entry : entries) {
                if (entry.getPostMatch().getRobotQuickCommentSelections().get(key)) {
                    commentFrequencies.put(key, 1 + commentFrequencies.get(key));
                }
            }
        }

        ArrayList<String> frequentRobotComment = new ArrayList<>();

        for (String key : commentFrequencies.keySet()) {
            if (commentFrequencies.get(key) >= entries.size() / 4.0) {
                frequentRobotComment.add(key);
            }
        }


        boolean doNotPick = frequentRobotComment.contains("Do not pick (explain)");
        boolean isActive = frequentRobotComment.contains("Active gear mech.");
        boolean hasIntake = frequentRobotComment.contains("Fuel intake");
        //Instance variables below should not be serialized but may be accessed by EventReports for analysis
        boolean hasPickup = frequentRobotComment.contains("Gear pickup");

        frequentRobotComment.remove("Do not pick (explain)");
        frequentRobotComment.remove("Active gear mech.");
        frequentRobotComment.remove("Fuel intake");
        frequentRobotComment.remove("Gear pickup");

        commentFrequencies = new HashMap<>();


        for (String comment : frequentRobotComment) {
            frequentRobotCommentStr += removeCommas(comment) + ';';
        }

        computeRankingMetrics();

        String allComments = "";
        for (ScoutEntry entry : entries) {
            if (!entry.getPostMatch().getRobotComment().equals("")) {
                allComments += entry.getPostMatch().getRobotComment() + "; ";
            }
			/*if(!autoGearPegLoc.contains(entry.getAuto().getGearPeg()))
				autoGearPegLoc+=entry.getAuto().getGearPeg()+"; ";*/
        }


    }

    private void calculateTotals() {

        //Calculate total variables declared above
        //i.e. total cubes delivered in teleop
    }

    private String removeCommas(String s) {
        StringBuilder newString = new StringBuilder();
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) != ',') {
                newString.append(s.charAt(i));
            } else {
                newString.append("; ");
            }
        }
        return newString.toString();
    }

    private void computeRankingMetrics() {
        double autoAbility = 0;
        double teleOpAbility = 0;
        double driveTeamAbility = 0;
        double robotQualities = 0;
        double firstPickAbility = 0;
        double secondPickAbility = 0;
    }

    public int getTeamNum() {
        return teamNum;
    }

    public void addEntry(ScoutEntry entry) {
        entry.getPostMatch().setRobotComment(removeCommasAndBreaks(entry.getPostMatch().getRobotComment()));

        entries.add(entry);
    }

    private String removeCommasAndBreaks(String s) {
        StringBuilder newString = new StringBuilder();
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) != ',' && s.charAt(i) != '\n') {
                newString.append(s.charAt(i));
            } else {
                newString.append("; ");
            }
        }
        return newString.toString();
    }

    public String getQuickStatus() {
        return "";
    }


}
