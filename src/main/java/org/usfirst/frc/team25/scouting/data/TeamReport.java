package org.usfirst.frc.team25.scouting.data;

import org.usfirst.frc.team25.scouting.data.models.Autonomous;
import org.usfirst.frc.team25.scouting.data.models.PostMatch;
import org.usfirst.frc.team25.scouting.data.models.ScoutEntry;
import org.usfirst.frc.team25.scouting.data.models.TeleOp;

import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;

import static org.usfirst.frc.team25.scouting.data.Statistics.average;
import static org.usfirst.frc.team25.scouting.data.Statistics.sum;

/**
 * Object model containing individual reports of teams in events and methods to process data
 * Not used during the 2018 season
 *
 * @author sng
 */
public class TeamReport {

    private final transient ArrayList<ScoutEntry> entries;
    private final int teamNum;
    private String teamName = "", frequentRobotCommentStr, allComments;

    public TeamReport(int teamNum) {
        this.teamNum = teamNum;
        entries = new ArrayList<>();

    }

    /**
     * Generates an easily-readable report with relevant stats on an team's capability
     *
     * @return A formatted string with relevant aggregate team stats
     */
    public String getQuickStatus() {
        //TODO write this
        String statusString = "Team " + getTeamNum();

        if (!getTeamName().isEmpty()) {
            statusString += " - " + getTeamName();
        }

        statusString += "\n\nAutonomous:\n";


        ArrayList<Object> autoList = SortersFilters.filterDataObject(entries, Autonomous.class);

        statusString += "\nAvg. cargo ship cargo: " + Statistics.round(average(autoList, "cargoShipCargo"), 2);
        statusString += "\nAvg. cargo ship hatches: " + Statistics.round(average(autoList, "cargoShipHatches"), 2);
        statusString += "\nAvg. rocket cargo: " + Statistics.round(average(autoList, "rocketCargo"), 2);
        statusString += "\nAvg. rocket hatches: " + Statistics.round(average(autoList, "rocketHatches"),2);
        statusString += "\nAvg. cargo dropped: " + Statistics.round(average(autoList, "cargoDropped"), 2);
        statusString += "\nAvg. hatches dropped: " + Statistics.round(average(autoList, "hatchesDropped"), 2);

        statusString += "\n\nTele-Op:\n";

        ArrayList<Object> teleList = SortersFilters.filterDataObject(entries, TeleOp.class);

        statusString += "\nAvg. cargo ship cargo: " + Statistics.round(average(teleList, "cargoShipCargo"),2);
        statusString += "\nAvg. cargo ship hatches: " + Statistics.round(average(teleList, "cargoShipHatches"),2);
        statusString += "\nAvg. rocket level 1 cargo: " +  Statistics.round(average(teleList, "rocketLevelOneCargo"),2);
        statusString += "\nAvg. rocket level 2 cargo: " +  Statistics.round(average(teleList, "rocketLevelTwoCargo"),2);
        statusString += "\nAvg. rocket level 3 cargo: " +  Statistics.round(average(teleList, "rocketLevelThreeCargo"),2);
        statusString += "\nAvg. rocket level 1 hatches: " +  Statistics.round(average(teleList, "rocketLevelOneHatches"),2);
        statusString += "\nAvg. rocket level 2 hatches: " +  Statistics.round(average(teleList, "rocketLevelTwoHatches"),2);
        statusString += "\nAvg. rocket level 3 hatches: " +  Statistics.round(average(teleList, "rocketLevelThreeHatches"),2);
        statusString += "\nAvg. cargo dropped: " +  Statistics.round(average(teleList, "cargoDropped"),2);
        statusString += "\nAvg. hatches dropped: " +  Statistics.round(average(teleList, "hatchesDropped"),2);
        
        statusString += "\n\nEndgame:\n";

        ArrayList<Object> postList = SortersFilters.filterDataObject(entries,PostMatch.class);

        statusString += "\n Avg. total points: ";

        statusString += "\n\nOverall:\n";

        statusString += "\n Common Quick Comments: " + "\n"  + frequentRobotCommentStr;


        return statusString;
    }

    public String getTeamName() {
        return teamName;
    }

    /**
     * Method to fetch the nickname of a team from a file
     *
     * @param dataLocation location of the TeamNameList file generated by <code>exportTeamList</code>
     */
    public void autoGetTeamName(File dataLocation) {
        String data = FileManager.getFileString(dataLocation);
        String[] values = data.split(",\n");

        for (String value : values) {

            if (value.split(",")[0].equals(Integer.toString(teamNum))) {

                teamName = value.split(",")[1];
                return;
            }
        }
    }

    public void findFrequentComments() {

        HashMap<String, Integer> commentFrequencies = new HashMap<>();
        for (String key : entries.get(0).getPostMatch().getRobotQuickCommentSelections().keySet()) {
            commentFrequencies.put(key, 0);
            for (ScoutEntry entry : entries) {
                if (entry.getPostMatch().getRobotQuickCommentSelections().get(key)) {
                    commentFrequencies.put(key, 1 + commentFrequencies.get(key));
                }
            }
        }

        ArrayList<String> frequentRobotComment = new ArrayList<>();

        for (String key : commentFrequencies.keySet()) {

            // Feel free to change this ratio
            if (commentFrequencies.get(key) >= entries.size() / 4.0) {
                frequentRobotComment.add(key);
            }
        }

        for (String comment : frequentRobotComment) {
            frequentRobotCommentStr += StringProcessing.removeCommasBreaks(comment) + " \n";
        }

        allComments = "";
        for (ScoutEntry entry : entries) {
            if (!entry.getPostMatch().getRobotComment().equals("")) {
                allComments += entry.getPostMatch().getRobotComment() + "; ";
            }

        }


    }

    public void addEntry(ScoutEntry entry) {
        entry.getPostMatch().setRobotComment(StringProcessing.removeCommasBreaks(entry.getPostMatch().getRobotComment()));

        entries.add(entry);
    }

    public ArrayList<ScoutEntry> getEntries() {
        return this.entries;
    }


    public int getTeamNum() {
        return teamNum;
    }
}
